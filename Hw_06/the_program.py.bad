#!/usr/bin/env python3

# The decimal number, 585 = 1001001001 in binary, is palindromic in both bases.
# Find the sum of all numbers, less than one million, which are palindromic in
# base 10 and base 2. (Please note that the palindromic number,
# in either base, may not include leading zeros.)

def ispoli(number):
  return (number[:round((len(number)/2))] == \
         number[int(len(number)/2):][::-1] or len(number) == 1) \
         and \
         (bin(int(number))[2:]\
         [:round((len(bin(int(number))[2:])/2))] == \
         bin(int(number))[2:]\
         [int(len(bin(int(number))[2:])/2):][::-1] \
         or len(bin(int(number))[2:]) == 1)

s = 0

for i in range(1000000):
  if i % 2 == 0:
    continue
  if ispoli(str(i)):
    s += i

print(s, "It's possibly a wrong answer")

'''
What is bad about this prog:
The round() function,
>>> 7/2;9/2
3.5
4.5
>>> round(7/2);round(9/2)
4
4
>>>
'''
